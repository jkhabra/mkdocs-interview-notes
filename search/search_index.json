{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JS &amp; React","text":""},{"location":"#javascript","title":"JavaScript","text":""},{"location":"#what-is-lexical-scoping","title":"What is lexical scoping?","text":"<ul> <li>Lexical scope is the ability for a functions scope to access variable from the parent scope</li> <li>Inner function has a access of variables of its outer function</li> </ul>"},{"location":"#what-is-the-primitive-data-type","title":"What is the primitive data type?","text":"<ul> <li>The predefined data types provided by JS</li> <li>The Primitive Data types in JavaScript include Number, String, Boolean, Undefined, Null and Symbol</li> </ul>"},{"location":"#what-are-non-primitive-data-types","title":"What are Non-primitive data types?","text":"<ul> <li>Objects and Array</li> </ul>"},{"location":"#what-is-hoisting","title":"What is hoisting?","text":"<ul> <li>It is default behavior of JS where all the variable and function declarations are moved on top</li> <li>Var variables are hoisted with a default value of undefined, which it accessible before declarations</li> <li>Let,const variables are hoisted without a default initialization</li> <li>Variable initializations are not hoisted, only variable declarations are hoisted</li> </ul>"},{"location":"#what-is-the-difference-between-varlet-and-const","title":"What is the difference between var,let and const?","text":"<ul> <li>Var has function scope and let, const has block scope</li> <li>Var variables can be updated and re-declared within its scope</li> <li>Let variable can be updated but not re-declared</li> <li>Const variables can neither be updated or re-declared</li> </ul>"},{"location":"#what-is-implicit-type-coercion","title":"What is implicit type Coercion?","text":"<ul> <li>Implicit type coercion in js is the automatic conversion of value from one data type to another</li> <li>it happens when the operator is used on different data type</li> <li>String coercion: it is when + operator used, it always convert number type into string type<ul> <li>it is when - operator used, it always convert string type into number type</li> </ul> </li> <li>Boolean coercion: it is when using logical,ternary operators,if statement and loop checks</li> <li>Logical coercion: They always return one of the operands</li> <li>Equality coercion: it is when using using <code>===</code> operator</li> </ul>"},{"location":"#is-js-a-statically-typed-or-a-dynamically-typed-language","title":"Is JS a statically typed or a dynamically typed language?","text":"<ul> <li>Js is dynamically typed language</li> <li>In a dynamically type language, the type of the variable is check during run-time</li> <li>in statically type language, the type of variable is checked during compile-time</li> </ul>"},{"location":"#what-is-currying","title":"What is currying?","text":"<ul> <li>It is a process that allows you to transform a function with multiple arguments into a sequence of nesting function</li> <li>It is an advanced technique to transform a function of arguments n, to n function of one or fewer arguments   curry.js<pre><code>const add = (a) =&gt; {\nreturn function (b) {\nreturn a + b;\n};\n};\nadd(3)(4);\n</code></pre></li> </ul>"},{"location":"#what-are-closures","title":"What are Closures?","text":"<ul> <li>It is an ability of a functions to remember the variable and function that are declared in its outer scope</li> </ul>"},{"location":"#where-we-need-to-use-closure-function","title":"Where we need to use closure function?","text":"<ul> <li>In event handlers, callback functions and more...</li> </ul>"},{"location":"#what-are-object-prototypes","title":"What are object prototypes?","text":"<ul> <li>All JS objects inherit properties from prototype like date from Date, Array object from Array prototype</li> </ul>"},{"location":"#what-is-recursion","title":"What is recursion?","text":"<ul> <li>It is a technique to iterate over an operation by having a function call itself repeatedly unit it arrives at a result</li> </ul>"},{"location":"#what-is-the-rest-parameter-and-spread-operator","title":"What is the rest parameter and spread operator?","text":"<ul> <li>Rest parameter: is used to take a n number of arguments and turns them into array</li> <li>Spread operator: takes an array or an object and spreads it</li> </ul>"},{"location":"#what-are-promises","title":"What are promises?","text":"<ul> <li>Promises are used to handle asynchronous operations in JS</li> <li>Promise object has four states-</li> <li>Pending: initial state</li> <li>Fulfilled: async operation is completed</li> <li>Rejected: async operation is failed</li> <li>Settled: the promise has been either rejected or fulfilled</li> <li>Promise constructor which takes in a callback function with two parameter resolve and reject</li> </ul>"},{"location":"#what-are-generator-functions","title":"What are generator functions?","text":"<ul> <li>There are a special class of functions, introduced in the ES6 version</li> <li>Generator function are declared with <code>function*</code> keyword instead of normal function</li> <li>In Generate function, when called, they do not execute the code instead, they return a generator object</li> <li>that generator object handles the execution</li> <li>the object consists of method called next()</li> <li>next() method executes the code until the nearest <code>yield</code> statement</li> <li>next() method returns the <code>yield</code> value : {value: 'some-value', done: true}</li> <li><code>value</code> property represents the yielded value and <code>done</code> tells, if function code is finished or not</li> </ul>"},{"location":"#what-is-object-destructuring","title":"What is Object Destructuring?","text":"<ul> <li>It is a new way to extract elements from an object of an array</li> </ul> <pre><code>const obj = { id: 1, name: \"yo\" };\nconst { userId: id, userName: name } = obj;\nconst { id, name } = obj; // if we want same name as the property\n</code></pre>"},{"location":"#what-is-event-binding-and-event-apply","title":"What is event binding and event apply?","text":"<ul> <li>Event binding refers to telling the browser that a particular   function should be called whenever some 'event' occurs</li> <li>Event apply used to call a function in a different object with the given this value,   and the arguments are passed in the form of an array</li> </ul>"},{"location":"#what-is-call-function","title":"What is call() function?","text":"<ul> <li>With the call() method, we can write a method that can be used on different object</li> </ul> <pre><code>const person = {\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n},\n};\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\n};\n// This will return \"John Doe\":\nperson.fullName.call(person1);\n</code></pre>"},{"location":"#what-is-event-bubbeling","title":"What is event-bubbeling?","text":"<ul> <li>It is a method of <code>event propagation</code> in the HTML DOM API</li> <li>When event is in element inside another element, and both elements have registered to handle to that event</li> <li>It is process that starts with the element that triggered the event   and then bubbles up to containing elements in hierarchy</li> </ul>"},{"location":"#what-are-synthetic-events","title":"What are synthetic events?","text":"<ul> <li>Thery are cross-browser around the browser's native events like stopPropagation() and preventDefault()</li> </ul>"},{"location":"#how-reduce-work-in-js","title":"How reduce() work in JS?","text":"<ul> <li>Reduce an array to a single value</li> <li>Does not change the original array</li> </ul>"},{"location":"#react","title":"React","text":""},{"location":"#what-is-constructor-in-react","title":"What is constructor in react?","text":"<ul> <li>It is a method used to initialize an object's state in class</li> <li>Constructor in a react component is called before the component is mounted</li> </ul>"},{"location":"#what-is-super-in-react","title":"What is Super in react?","text":"<ul> <li>Super(): it is used to call the constructor of its parent class</li> </ul>"},{"location":"#what-is-memo-in-react","title":"What is memo in react?","text":"<ul> <li>React memo is a higher-oder component that wraps around a component to memoize the rendered output   and avoid unnecessary renderings</li> <li>Using memo will cause React to skip rendering a component if its props haven't changed</li> </ul>"},{"location":"#what-are-the-lifecycle-methods-of-react","title":"What are the lifecycle methods of React?","text":"<ul> <li>After react v 16.3+</li> <li><code>getDrivedStateFromProps</code>: invoked before render() and is invoked on every render</li> <li><code>componentDidMount</code>: executed after first rendering</li> <li><code>shoudComponentUpdate</code>: determines if the component will be update or not, by default it returns true</li> <li><code>getSnapshotBeforeUpdate</code>: executed right before rendered output is committed to DOM</li> <li><code>componentDidUpdate</code>: mostly it used to update the DOM in response to prop or state changes</li> <li><code>componentWillUnmount</code>: it will be used to cancel any outgoing process</li> </ul>"},{"location":"#what-is-render-props","title":"What is render props?","text":"<ul> <li>Instead of implementing its own render logic, a child component calls render props as functions.</li> </ul>"},{"location":"#what-is-action-synctax-in-redux","title":"What is action synctax in redux?","text":"<ul> <li>Actions are plain JS object that must have a type attribute   to indicate the type of action performed</li> <li>{type: GET_DATA, payload: {}}</li> </ul>"},{"location":"#how-arrow-function-bind-this","title":"How arrow function bind <code>this</code>?","text":"<ul> <li>Arrow function do not bind their own <code>this</code>, instead they inherit from parent scope or lexical scope</li> <li>In regular function the this keyword represented the object that called the function   which could be the window, the document, a button or whatever</li> </ul>"},{"location":"#what-is-shadow-dom","title":"What is shadow DOM?","text":"<ul> <li>Lets us create custom component</li> <li>It creates scoped DOM Tree inside our element</li> </ul>"},{"location":"#why-in-clearinterval-didnt-works-right-after-setinterval-in-useeffect","title":"Why in clearInterval() didn't works right after setInterval() in useEffect?","text":"<ul> <li>To handle this we can use useEffect's cleanup function   <pre><code>return () =&gt; {\nclearInterval(intervalId);\n};\n</code></pre></li> </ul>"},{"location":"#how-to-pass-state-in-context-api","title":"How to pass state in context API?","text":""},{"location":"#how-to-connect-graphql-to-react","title":"How to connect GraphQL to react?","text":""},{"location":"html-css/","title":"Html css","text":""},{"location":"html-css/#htmlcss","title":"HTML/CSS","text":""},{"location":"html-css/#what-is-box-modal-in-css","title":"What is box modal in css?","text":"<ul> <li>It is essentially a box that wraps around every HTML element</li> <li>It consists of margin, border, padding and the content itself</li> <li>It is used to create the design and layout of web pages</li> </ul>"},{"location":"html-css/#what-are-pseudo-classes-in-css","title":"What are pseudo classes in CSS?","text":"<ul> <li>Pseudo class class is used to define he special state of the selected element, like hover,focus</li> <li>Pseudo class names are not case sensitive</li> </ul>"},{"location":"html-css/#what-are-pseudo-elements-in-css","title":"What are pseudo elements in CSS?","text":"<ul> <li>Pseudo element is a keyword added to a selector that lets you style a specific part of the selected element</li> <li>(::) colons are used for pseudo-elements</li> <li>like ::after, ::before</li> </ul>"},{"location":"html-css/#what-are-semantic-elements","title":"What are semantic elements?","text":"<ul> <li>A semantic element clearly describes its meaning to both the browser and the dev</li> <li>Such as form, table and article</li> </ul>"},{"location":"html-css/#what-is-the-difference-between-flex-and-grid","title":"What is the difference between flex and grid?","text":"<ul> <li>Flex is one-dimensional layout system, while grid is a two-dimensional layout system</li> <li>Flex can work on either row or columns</li> <li>Grid can work on both row and columns</li> </ul>"},{"location":"html-css/#what-is-meta-tag-for-in-html","title":"What is meta tag for in HTML?","text":"<ul> <li>Metadata is data about data</li> <li>Meta tags always go inside the  element <li>It used to specify character set, page description, keywords author of the doc and viewport settings</li>"},{"location":"html-css/#what-are-inline-and-block-elements-in-html","title":"What are inline and block elements in HTML?","text":"<ul> <li>Block element always starts on a new line and takes full the width</li> <li>Inline element does not start on a new line and it only takes up as much width as necessary</li> <li>inline-block: allows to set width and height on the element</li> </ul>"},{"location":"html-css/#what-does-accessibility-a11y-mean","title":"What does Accessibility (a11y) mean?","text":"<ul> <li>It refers to how software or hardware combinations makes a accessible system for disabilities</li> <li>Such as visual impairment, hearing loss</li> </ul>"},{"location":"html-css/#what-is-the-default-value-of-margin-padding","title":"What is the default value of margin, padding?","text":"<ul> <li>0 default margins,boaders and padding are all 0</li> </ul>"},{"location":"html-css/#can-custom-method-used-on-array","title":"Can custom method used on array?","text":"<ul> <li>It is possible with Array.prototype method</li> </ul>"},{"location":"html-css/#why-const-var-object-value-can-be-changed","title":"Why const var object value can be changed?","text":"<ul> <li>The property of const object can be change but cannot be changed to a reference to the new object</li> <li>the values inside the const array can be changed</li> <li>It cannot reference a new array</li> </ul>"},{"location":"html-css/#what-is-difference-between-callback-and-promises","title":"What is difference between callback and promises?","text":"<ul> <li>Promises is something that is achieved or completed in the future</li> <li>A callback function is passed as an argument to another function</li> </ul>"},{"location":"node/","title":"Node","text":""},{"location":"node/#node-and-express","title":"Node and Express","text":""},{"location":"node/#what-is-repl","title":"What is REPL?","text":"<ul> <li>It stands for Read, Eval, Print and Loop   which means evaluating code on to go</li> </ul>"},{"location":"node/#what-is-callback-hell","title":"What is callback hell?","text":"<ul> <li>It is nested callbacks stacks below one another forming a pyramid structure</li> <li>Every callback depends/wait for previous callback, there making a pyramid</li> <li>that affects the readability and maintainability of the code</li> </ul>"},{"location":"node/#what-is-an-event-loop","title":"What is an event loop?","text":"<ul> <li>The event loop executes tasks from the event queue only when the call stack is empty</li> <li>Event loop is an endless loop, which waits for tasks, execute them and   then sleeps unit it receives more tasks</li> <li>It allows us to use callback and promises</li> </ul>"},{"location":"node/#what-is-an-event-emitter","title":"What is an Event Emitter?","text":"<ul> <li>It is a class that holds all the objects that can emit events</li> <li>It is used to trigger an event <code>.on</code> is used to add a callback function that's going   to be executed when the event is triggered</li> </ul> event-emiter.js<pre><code>const EventEmitter = require(\"events\");\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on(\"event\", () =&gt; {\nconsole.log(\"an event occurred!\");\n});\nmyEmitter.emit(\"event\");\n</code></pre>"},{"location":"node/#what-are-nodejs-streams","title":"What are node.js streams?","text":"<ul> <li>They are instances of EventEmitter which can be used to work with streaming data</li> <li>They handling and manipulating streaming large files(videos,mp3,..) over network</li> <li>They use buffer as temporary storage</li> </ul>"},{"location":"node/#what-are-buffers","title":"What are buffers?","text":"<ul> <li>it is a temporary memory that is used by stream to hold on to some data unit consumed</li> </ul>"},{"location":"node/#what-is-middleware","title":"What is middleware?","text":"<ul> <li>It comes in between request and business logic</li> <li>Mainly used to capture logs and enable rate limit, routing,authentication,   whatever not part of business logic</li> <li>These are third party middleware also like body-parser and can write custom ones</li> </ul>"},{"location":"node/#what-is-a-reactor-pattern-in-nodejs","title":"What is a Reactor pattern in Node.js?","text":"<ul> <li>It is a pattern for nonblocking I/O operations</li> <li>this is used in any event-driven architecture</li> <li>It has two components</li> <li>Reactor: Its job is to dispatch I/O event to appropriate handlers</li> <li>Handler: Its job is to actually work on those events</li> </ul>"},{"location":"node/#what-is-a-thread-pool","title":"What is a thread pool?","text":"<ul> <li>The thread pool is handled by the <code>libuv</code> library</li> <li>Libuv is a multi-platform C library that provides support for asynchronous I/O-based operations   such as file system, networking and concurrency</li> </ul>"},{"location":"node/#what-does-event-driven-programming-mean","title":"What does event driven programming mean?","text":"<ul> <li>Event driven programming approach uses events to trigger various functions</li> <li>Event can be anything such as typing a key or clicking button</li> <li>A callback fun is already registered with the element and executes whenever event is triggered</li> </ul>"},{"location":"node/#what-are-first-class-functions","title":"What are first-class functions?","text":"<ul> <li>Function is treated as a variable that can be assigned to any other variable or passed as an argument</li> </ul>"},{"location":"node/#mongodb-mongoose","title":"MongoDb (mongoose)","text":""},{"location":"node/#what-is-mongoose","title":"What is Mongoose?","text":"<ul> <li>Mongoose is a JS object-oriented programming library</li> </ul>"},{"location":"node/#what-is-a-document-in-mongodb","title":"What is a Document in MongoDB?","text":"<ul> <li>it is an ordered set of keys with associated values</li> <li>It is represented by a map, hash or dictionary</li> </ul>"},{"location":"node/#what-is-collection-in-mongodb","title":"What is Collection in MongoDB?","text":"<ul> <li>It is a group of documents</li> <li>Documents within collection can have different fields</li> <li>A collection is the equivalent of a table in relational database system</li> <li>A collection exists within single database</li> </ul>"},{"location":"node/#what-are-databases","title":"What are Databases?","text":"<ul> <li>MongoDB groups collection into database</li> <li>It can host several database, each grouping together collection</li> <li>Some reserved database names: admin, local and config</li> </ul>"},{"location":"node/#what-are-some-features-of-mongodb","title":"What are some features of MongoDB?","text":"<ul> <li>Indexing: Indexes are data structure that support the efficient execution of queries</li> <li>Aggregation: it provides an aggregation framework based on the concept of data processing pipelines</li> <li>Special collection and index types: it supports time-to-live (TTL) collections for data   that should expire at a certain time</li> <li>File storage: it supports an easy-to-use protocol for storing large files and file metadata</li> <li>Sharding: it is the process of splitting data up across machines</li> </ul>"},{"location":"node/#how-to-add-data","title":"How to add data?","text":"<ul> <li>To insert a single document <code>insertOne</code> method is used</li> <li>For many documents <code>insertMany</code> method is used</li> </ul>"},{"location":"node/#what-are-the-data-types","title":"What are the data types?","text":"<ul> <li>the common data types in MongoDB are:</li> <li>Null, Boolean, Number, String, Date, Regular expression, Array,Embedded document,     Object ID, Binary Data, Code</li> </ul>"},{"location":"node/#how-is-querying-done","title":"How is Querying done?","text":"<ul> <li>The find method is used to perform queries</li> <li>it returns a subset of documents in a collection,   from no documents at all to the entire collection</li> <li>Which documents get returned is determined by the first argument to find</li> </ul>"},{"location":"node/#what-is-indexing","title":"What is Indexing?","text":"<ul> <li>Indexes are data structure that support the efficient execution of queries</li> <li>They contain copies of parts of the data in document to make queries more efficient</li> <li>Without indexes MongoDB has to search every row in database   table to find the document that match each query</li> </ul>"},{"location":"node/#what-is-the-set-modifier","title":"What is the SET Modifier?","text":"<ul> <li>If the value of a field doesn't yet exist, <code>$set</code> sets the value</li> <li>It is useful for updating schemas or adding user-defined keys</li> </ul>"},{"location":"node/#what-do-you-mean-by-transactions","title":"What do you mean by Transactions?","text":"<ul> <li>It is a logical unit of processing in a database that indicates one or more database operations</li> <li>Which can be read or write operations</li> <li>It provides a useful feature to ensure consistency</li> <li>Mongo has two APIs to use transaction</li> <li>Core API</li> <li>Call-back API</li> </ul>"},{"location":"node/#what-is-a-replica-set","title":"What is a replica set?","text":"<ul> <li>A replica set is group of mongo instances that host the same data set</li> <li>Its one node is primary, and another is secondary</li> <li>From primary to the secondary node all data replicates</li> </ul>"},{"location":"node/#what-is-the-correct-use-case-for-mongodb","title":"What is the correct use-case for MongoDB?","text":"<ul> <li>MongoDB is prefect for Product Data Management</li> <li>It enables product data and related information to managed   and processed in a single, central system</li> <li>This allows for detailed Cost Analysis, Increased Productivity and Improved Collaboration</li> </ul>"},{"location":"r-failed/","title":"R failed","text":""},{"location":"r-failed/#failed-interview-question","title":"Failed interview question","text":""},{"location":"r-failed/#write-code-to-print-1-100-where-every-multiple-of-3-should-print-fizz","title":"Write code to print 1-100 where every multiple of 3 should print \"FIZZ\",","text":"<p>every multiple of 5 should print \"BUZZ\" and every multiple of 3 and 5 as \"FIZZBUZZ\" Ex: 1 2 FIZZ 4 BUZZ</p>"},{"location":"r-failed/#what-is-rest-apis","title":"What is REST APIs?","text":"<ul> <li>Representational state transfer is software architecture that impose condition on how API should work</li> <li>REST API is way of accessing web service in a simple and flexible way without having nay processing</li> <li>REST technology is generally preferred to the more robust Simple Object Access Protocol (SOAP)   technology because REST uses less bandwidth, simple and flexible making it more suitable for internet usage</li> <li>All communication done via REST apis uses only HTTP request</li> </ul>"},{"location":"r-failed/#what-is-patch-method","title":"What is Patch method?","text":"<ul> <li>It is used to modify capabilities</li> <li>PATCH req only needs to contain the changes to resource, not the complete resource</li> </ul>"},{"location":"r-failed/#how-to-make-a-custom-hooks","title":"How to make a custom hooks?","text":"<ul> <li>event loop, custom hooks</li> </ul>"},{"location":"r-failed/#what-this-code-do","title":"What this code do?","text":"<p>const obj = { value: 42 };</p> <p>function getValue() { return this.value; }</p> <p>const boundFunction = getValue.bind(obj); const result = getValue.call(obj);</p>"},{"location":"r-failed/#what-does-this-bind-mean","title":"What does this bind mean?","text":"<ul> <li>Function being called to have a different this value than the default one</li> <li>bind() function, that always runs with a specific <code>this</code> value</li> </ul>"},{"location":"r-failed/#what-is-difference-null-and-undefined","title":"What is difference null and undefined?","text":"<ul> <li><code>Null</code> means an empty value and is also a primitive type</li> <li>The variable with has assigned as null contains no value</li> <li><code>Undefined</code> variable has been declared, but its value has not been assigned</li> </ul>"},{"location":"r-failed/#how-cors-work","title":"How CORS work?","text":"<ul> <li>Cross-Origin Resource Sharing (cors)</li> <li>is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, port)</li> <li>When a browser sends a request to a server, it includes an Origin header</li> <li>This header contains the origin of the request, which is the domain, protocol, and port</li> <li>The server can then decide whether to allow or deny the request</li> <li>If the request is allowed, the server includes the Access-Control-Allow-Origin header in the response</li> <li>This header specifies the origin that is allowed to access the resources</li> </ul>"},{"location":"r-failed/#how-react-renders","title":"How react renders?","text":"<ul> <li>After render triggered, <code>React</code> calls components to figure out what to display on screen</li> <li>The JSX is somehow converted into actual HTML DOM elements displayed on the screen</li> </ul>"},{"location":"r-failed/#what-is-difference-between-library-and-framework","title":"What is difference between library and framework?","text":"<ul> <li>A <code>framework</code> can reduce complexity for developer</li> <li>A <code>framework</code> can abstract away logic, behavior and even architectural patterns</li> <li>A <code>library</code> can help with complexity, but typically focuses on code reuse</li> </ul>"},{"location":"r-failed/#what-are-web-apis-with-example","title":"what are web APIs with example?","text":""}]}